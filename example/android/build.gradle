// Copyright Â© 2018-2023 Kaleyra S.p.a. All Rights Reserved.
// See LICENSE for licensing information

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    buildToolsVersion = "34.0.0"
    minSdkVersion = 24
    compileSdkVersion = 34
    targetSdkVersion = 34

    ndkVersion = "26.1.10909125"
  }
  repositories {
    google()
    mavenCentral()
    maven { url 'https://maven.bandyer.com/releases' }
    maven { url 'https://developer.huawei.com/repo/' }
  }


  dependencies {
    classpath("com.android.tools.build:gradle")
    classpath 'com.google.gms:google-services:4.4.0'
    classpath("com.facebook.react:react-native-gradle-plugin")
    classpath 'com.huawei.agconnect:agcp:1.9.1.304'
  }
}

allprojects {
  repositories {
    maven { url 'https://maven.bandyer.com/releases' }
    maven { url 'https://developer.huawei.com/repo/' }
  }

  subprojects {
      afterEvaluate { project ->
        if (project.hasProperty('android')) {
          project.android {
            if (namespace == null || namespace.isEmpty()) {
              def defaultNamespace = project.group.toString().replace('.', '_')
              namespace = defaultNamespace
            }

            buildFeatures {
              buildConfig = true
            }
          }

          // Task to ensure namespace and remove package attribute
          project.tasks.register("fixManifestsAndNamespace") {
            doLast {
              // Ensure namespace in build.gradle
              def buildGradleFile = file("${project.projectDir}/build.gradle")
              if (buildGradleFile.exists()) {
                def buildGradleContent = buildGradleFile.getText('UTF-8')
                def manifestFile = file("${project.projectDir}/src/main/AndroidManifest.xml")
                if (manifestFile.exists()) {
                  def manifestContent = manifestFile.getText('UTF-8')
                  def packageName = manifestContent.find(/package="([^"]+)"/) { match, p -> p }
                  if (packageName && !buildGradleContent.contains("namespace")) {
                    println "Setting namespace in ${buildGradleFile}"
                    buildGradleContent = buildGradleContent.replaceFirst(
                      /android\s*\{/, "android {\n    namespace '${packageName}'"
                    )
                    buildGradleFile.write(buildGradleContent, 'UTF-8')
                  }
                }
              }

              // Remove package attribute from AndroidManifest.xml
              def manifests = fileTree(dir: project.projectDir, includes: ['**/AndroidManifest.xml'])
              manifests.each { File manifestFile ->
                def manifestContent = manifestFile.getText('UTF-8')
                if (manifestContent.contains('package=')) {
                  println "Removing package attribute from ${manifestFile}"
                  manifestContent = manifestContent.replaceAll(/package="[^"]*"/, '')
                  manifestFile.write(manifestContent, 'UTF-8')
                }
              }
            }
          }

          // Ensure the task runs before the build process
          project.tasks.matching { it.name.startsWith("preBuild") }.all {
            dependsOn project.tasks.named("fixManifestsAndNamespace")
          }
        }
      }
    }
}

apply plugin: "com.facebook.react.rootproject"
apply plugin: "com.huawei.agconnect"
